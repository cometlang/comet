function _skip_whitespace (iter) {
    while (iter.has_next?()) {
        var char = iter.peek_next()
        if (char.whitespace?()) {
            iter.get_next()
        } else {
            return
        }
    }
}

function _consume (iter, expected) {
    var actual = iter.get_next()
    if (actual != expected) {
        throw Exception("Expected '" + expected + "' but got '" + actual + "'")
    }
}

function _parse_number (iter) {
    var num = StringBuilder()
    var char = iter.peek_next()
    while (iter.has_next?() && (char.number?() || char == '-')) {
        num += char
        iter.get_next()
        char = iter.peek_next()
    }
    if (char == '.') {
        num += char
        _consume(iter, '.')
        char = iter.peek_next()
        while (iter.has_next?() && char.number?()) {
            num += char
            iter.get_next()
            char = iter.peek_next()
        }   
    }
    return Number.parse(num.to_string())
}

function _parse_string (iter) {
    _consume(iter, '"')
    var result = StringBuilder()
    var char = iter.peek_next()
    while (iter.has_next?() && char != '"') {
        result += iter.get_next()
        char = iter.peek_next()
    }
    _consume(iter, '"')
    return result.to_string()
}

function _parse_array (iter) {
    _consume(iter, '[')
    var result = []
    var char = iter.peek_next()
    while (iter.has_next?() && char != ']') {
        result.append(_parse_json(iter))
        _skip_whitespace(iter)
        char = iter.peek_next()
        if (char == ',') {
            _consume(iter, ',')
        }
    }
    _consume(iter, ']')
    return result
}

function _parse_object (iter) {
    _consume(iter, '{')
    var result = {}
    while (iter.has_next?()) {
        _skip_whitespace(iter)
        var char = iter.peek_next()
        if (char == '"') {
            var name = _parse_string(iter)
            _skip_whitespace(iter)
            _consume(iter, ':')
            _skip_whitespace(iter)
            var obj = _parse_json(iter)
            result[name] = obj
        } else if (char == ',') {
            _consume(iter, ',')
            next
        } else if (char == '}') {
            _consume(iter, '}')
            break
        } else {
            throw Exception("Couldn't parse json: '" + char + "'")
        }
    }
    return result
}

function _parse_json (iter) {
    while (iter.has_next?()) {
        _skip_whitespace(iter)
        var char = iter.peek_next()
        if (char == '{') {
            return _parse_object(iter)
        } else if (char == '[') {
            return _parse_array(iter)
        } else if (char == '"') {
            return _parse_string(iter)
        } else if (char == '-' || char.number?()) {
            return _parse_number(iter)
        } else {
            throw Exception("Couldn't parse json: '" + char + "'")
        }
    }
}

function parse_from_string(str) {
    return _parse_json(str.iterator())
}

function parse_from_file(filename) {
    var sceneFile = File.open(filename, FOPEN.READ_ONLY)
    var sceneContents = sceneFile.read()
    sceneFile.close()
    return parse_from_string(sceneContents)
}

function _get_string_for_obj(obj) {
    if (obj is Hash) {
        return _output_hash(obj)
    } else if (obj is List) {
        return _output_list(obj)
    } else if (obj is String || obj is DateTime) {
        return String.format('"{0}"', obj.to_string())
    } else if (obj is Number) {
        return obj.to_string()
    } else {
        throw ArgumentException('Unsupported json output type: ' + obj.class_name())
    }
}

function _output_hash(hash) {
    var result = StringBuilder()
    result.append('{')
    foreach (var key in hash) {
        var obj = hash[key]
        var out_string = _get_string_for_obj(obj)
        result.append(String.format('"{0}": {1}, ', key, out_string))
    }
    if (!hash.empty?()) {
        result.pop()
        result.pop()
    }
    result.append('}')
    return result.to_string()
}

function _output_list(list) {
    var result = StringBuilder()
    result.append('[')
    foreach (var item in list) {
        result.append(_get_string_for_obj(item))
        result.append(', ')
    }
    if (!hash.empty?()) {
        result.pop()
        result.pop()
    }
    result.append(']')
    return result.to_string()
}

function to_json_string(obj) {
    if (!obj is Hash && !obj is List) {
        throw ArgumentException("json can only be output from a hash or a list")
    }
    if (obj is Hash) {
        return _output_hash(obj)
    } else {
        return _output_list(obj)
    }
}

function to_json_file(obj, filename) {
    var json_string = to_json_string(obj)
    var outf = File.open(filename, FOPEN.READ_WRITE)
    outf.write_line(json_string)
    outf.close()
}
