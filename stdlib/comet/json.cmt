function _skip_whitespace (iter) {
    while (iter.has_next?()) {
        var char = iter.peek_next()
        if (char == ' ' || char == '\n' || char == '\r') {
            iter.get_next()
        } else {
            return
        }
    }
}

function _consume (iter, expected) {
    var actual = iter.get_next()
    if (actual != expected) {
        throw Exception("Expected '" + expected + "' but got '" + actual + "'")
    }
}

function _parse_number (iter) {
    var num = ''
    var char = iter.peek_next()
    while (iter.has_next?() && (char.number?() || char == '-')) {
        num += char
        iter.get_next()
        char = iter.peek_next()
    }
    if (char == '.') {
        num += char
        _consume(iter, '.')
        char = iter.peek_next()
        while (iter.has_next?() && char.number?()) {
            num += char
            iter.get_next()
            char = iter.peek_next()
        }   
    }
    return Number.parse(num)
}

function _parse_string (iter) {
    _consume(iter, '"')
    var result = ''
    var char = iter.peek_next()
    while (iter.has_next?() && char != '"') {
        result += iter.get_next()
        char = iter.peek_next()
    }
    _consume(iter, '"')
    return result
}

function _parse_array (iter) {
    _consume(iter, '[')
    var result = []
    var char = iter.peek_next()
    while (iter.has_next?() && char != ']') {
        result.append(_parse_json(iter))
        _skip_whitespace(iter)
        char = iter.peek_next()
        if (char == ',') {
            _consume(iter, ',')
        }
    }
    _consume(iter, ']')
    return result
}

function _parse_object (iter) {
    _consume(iter, '{')
    var result = {}
    while (iter.has_next?()) {
        _skip_whitespace(iter)
        var char = iter.peek_next()
        if (char == '"') {
            var name = _parse_string(iter)
            _skip_whitespace(iter)
            _consume(iter, ':')
            _skip_whitespace(iter)
            var obj = _parse_json(iter)
            result[name] = obj
        } else if (char == ',') {
            _consume(iter, ',')
            next
        } else if (char == '}') {
            _consume(iter, '}')
            break
        } else {
            throw Exception("Couldn't parse json: '" + char + "'")
        }
    }
    return result
}

function _parse_json (iter) {
    while (iter.has_next?()) {
        _skip_whitespace(iter)
        var char = iter.peek_next()
        if (char == '{') {
            return _parse_object(iter)
        } else if (char == '[') {
            return _parse_array(iter)
        } else if (char == '"') {
            return _parse_string(iter)
        } else if (char == '-' || char.number?()) {
            return _parse_number(iter)
        } else {
            throw Exception("Couldn't parse json: '" + char + "'")
        }
    }
}

function parse_from_string(str) {
    return _parse_json(str.iterator())
}

function parse_from_file(filename) {
    var sceneFile = File.open(filename, FOPEN.READ_ONLY)
    var sceneContents = sceneFile.read()
    sceneFile.close()
    return parse_from_string(sceneContents)
}
