class _That {
    init(value) {
        self.value = value
    }

    is_nil(message=nil) {
        assert(self.value.nil?(), message)
    }

    is_equal_to(expected, message=nil) {
        assert(self.value == expected, message)
    }

    contains(expected, message=nil) {
        assert(self.value.contains?(expected), message)
    }

    matches(value, message=nil) {
        if (callable?(value)) {
            assert(value(self.value) == true, message)
        } else {
            is_equal_to(value, message)
        }
    }

    throws(message=nil) {
        if (!callable?(self.value)) {
            throw ArgumentException(String.format('throws() expects a callable to assert, but got {0}', self.value))
        }
        try {
            self.value()
            assert(false, message)
        } catch (Exception as ex) {
            assert(true, message)
        }
    }
}

class Assert {
    static that(value) {
        return _That(value)
    }
}

if (__MAIN__ == __FILE__) {
    var tests = {}
    var total = 0
    var passed = 0
    foreach (var to_import in ARGV) {
        import to_import as imported
        foreach (var func in imported.functions()) {
            if (func.starts_with?('test_')) {
                total += 1
                var test_name = String.format('{0}:{1}', imported.filename(), func)
                tests[test_name] = true
                try {
                    call_function(imported, func)
                    print(String.format('✓ {0} passed', test_name))
                    passed += 1
                } catch (Exception as ex) {
                    tests[test_name] = false
                    print(String.format('⨯ {0} failed', test_name))
                    print(ex.class_name(), ':')
                    print(ex.stacktrace)
                }
            }
        }
    }
    print(String.format('{0}/{1} tests passed', passed, total))
}
