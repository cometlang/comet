import 'coverage' as coverage

class test {}

class test_case {
    init(*args) {
        self.args = args
    }
}

class ignore {
    init(reason=nil) {
        self.reason = reason
    }
}

class Assert {
    init(value) {
        self.value = value
    }

    is_nil(message=nil) {
        if (message.nil?())
            message = String.format('expected {0} to be nil', self.value)
        assert(self.value.nil?(), message)
    }

    is_not_nil(message=nil) {
        assert(self.value.nil?() == false, message)
    }

    is_equal_to(expected, message=nil) {
        if (message.nil?())
            message = String.format('expected {0} to equal {1}', self.value, expected)
        assert(self.value == expected, message)
    }

    is_not_equal_to(expected, message=nil) {
        if (message.nil?())
            message = String.format('expected {0} to not equal {1}', self.value, expected)
        assert(self.value != expected, message)
    }

    is_less_than(expected, message=nil) {
        if (message.nil?())
            message = String.format('expected {0} to be less than {1}', self.value, expected)
        assert(self.value < expected, message)
    }

    is_true(message=nil) {
        if (message.nil?())
            message = String.format('expected {0} to be true', self.value)
        assert(self.value, message)
    }

    is_false(message=nil) {
        if (message.nil?())
            message = String.format('expected {0} to be false', self.value)
        assert(!self.value, message)
    }

    is_callable(message=nil) {
        assert(callable?(self.value))
    }

    contains(expected, message=nil) {
        assert(self.value.contains?(expected), message)
    }

    does_not_contain(expected, message=nil) {
        assert(!self.value.contains?(expected), message)
    }

    has_count(expected_count, message=nil) {
        assert(self.value.count() == expected_count, message)
    }

    matches(value, message=nil) {
        if (callable?(value)) {
            assert(value(self.value) == true, message)
        } else {
            is_equal_to(value, message)
        }
    }

    throws(message=nil) {
        if (!callable?(self.value)) {
            throw ArgumentException(String.format('throws() expects a callable to assert, but got {0}', self.value))
        }
        try {
            self.value()
            assert(false, message)
        } catch (Exception as ex) {
            if (ex is AssertionException) {
                rethrow ex
            }
            assert(true, message)
        }
    }

    does_not_throw(message=nil) {
        if (!callable?(self.value)) {
            throw ArgumentException(String.format('does_not_throw() expects a callable to assert, but got {0}', self.value))
        }
        try {
            self.value()
            assert(true, message)
        } catch (Exception as ex) {
            if (ex is AssertionException) {
                rethrow ex
            }
            assert(false, message)
        }
    }

    is_of_type(type, message=nil) {
        if (message.nil?()) {
            message = String.format("Expected type '{0}' but got '{1}'", type, self.value.class_name())
        }
        assert(self.value is type, message)
    }

    is_empty(message=nil) {
        assert(self.value.empty?(), message)
    }

    is_not_empty(message=nil) {
        assert(!self.value.empty?(), message)
    }

    static that(value) {
        return Assert(value)
    }

    static fail(message) {
        assert(false, message)
    }

    static pass() {}
}

if (__MAIN__ == __FILE__) {
    var tests = {}
    var total = 0
    var passed = 0
    var ignored = 0
    var args = ARGV
    var generate_coverage = false

    function run_test_case(module, func, args) {
        var test_name
        if (args.empty?())
            test_name = String.format('{0}:{1}', module.filename(), func.name())
        else
            test_name = String.format('{0}:{1}{2}', module.filename(), func.name(), args)
        try {
            call_function(module, func, *args)
            tests[test_name] = true
            print(String.format('✓ {0} passed', test_name))
            passed += 1
            return true
        } catch (Exception as ex) {
            tests[test_name] = false
            print(String.format('⨯ {0} failed', test_name))
            print_to(STD_STREAM.ERR, ex.class_name(), ':')
            print_to(STD_STREAM.ERR, ex.stacktrace)
        }
        return false
    }

    if (ARGV[0] == '--coverage') {
        args = ARGV.slice(1)
        generate_coverage = true
    }
    foreach (var to_import in args) {
        import to_import as imported
        foreach (var func in imported.functions()) {
            var attrs = func.attributes()
            var is_test = attrs.find((|x|) { return x is test })
            if (func.name().starts_with?('test_') || !is_test.nil?()) {
                var ignoreAttr = attrs.filter((|x|) { return x is ignore })
                var test_cases = attrs.filter((|x|) { return x is test_case })
                if (!ignoreAttr.empty?()) {
                    ignored += 1
                    total += test_cases.empty?() ? 1 : test_cases.length()
                    print(String.format('ignored {0}:{1} ({2})', imported.filename(), func.name(), ignoreAttr[0].reason))
                } else {
                    if (!test_cases.empty?()) {
                        total += test_cases.length()
                        foreach (var case in test_cases) {
                            run_test_case(imported, func, case.args)
                        }
                    } else {
                        total += 1
                        run_test_case(imported, func, [])
                    }
                }
            }
        }
    }
    print(String.format('{0}/{1} tests passed, {2} ignored', passed, total, ignored))
    if (generate_coverage) {
        coverage.generate()
    }
    if (passed != total) {
        exit(128)
    }
}
