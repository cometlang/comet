var normal_string = 'This is a string'
print(normal_string)
print(normal_string.length())

var utf8_string = "This is ä ütf-8 string Encyclöpædiä"
print(utf8_string)
print(utf8_string.length())
var utf8_upper = utf8_string.to_upper()
print("Upper: ", utf8_upper)
print("Lower: ", utf8_upper.to_lower())
assert(utf8_string.contains?('ü'))

assert(("this is" + " a string") == 'this is a string')
var concat = 'this'
concat += ' is '
concat += 'a string'
print("'", concat, "'")
assert(concat == 'this is a string')

assert("   'left trimmed'".left_trim() == "'left trimmed'")
assert("'right trimmed'   ".right_trim() == "'right trimmed'")
assert("   'trimmed'   ".trim() == "'trimmed'")
assert("   'trimmed'\n".trim() == "'trimmed'")

print("this is a string...".ends_with?('ing...'))
print("this is a string...".ends_with?('not this'))

print("this is a string...".starts_with?('this'))
print("this is a string...".starts_with?('not this'))

print("this;is;a;string;;that;should;be;split".split(';'))

print("Iteration start")
foreach(var char in utf8_string)
    print(char)
print("Iteration complete")

print("This has an\nescaped newline in it")
print("This has an \\ escaped escape in it")

var replaced = "this;is;a;string;;that;should;be;replaced".replace(';', ' ')
print("'", replaced, "'")
assert(replaced == "this is a string  that should be replaced")

var ooooo = utf8_string[10]
print(ooooo)
assert(ooooo == "ü")

try
{
    utf8_string[42]
    assert(false, 'should not get here - exception should be thrown')
}
catch (IndexOutOfBoundsException)
{
    print("Correctly out of bounds")
}

var super_string = 'abc0123456789cba'
var sub = super_string.substring(3, 10)
print('sub: ', sub)
assert(sub == '0123456789')

var val = 'a'.value()
assert(val == 97)

var formatted = String.format("Hello: {0}{1}", 12345, 6789)
print(formatted)
assert(formatted == 'Hello: 123456789', 'formatted string did not match')

formatted = String.format("Hello: {{0}}{0}", 12345)
print(formatted)
assert(formatted == 'Hello: {0}12345', 'formatted string did not match')

formatted = String.format('Strüng mit unic{0}de', 'ö')
print(formatted)
assert(formatted == 'Strüng mit unicöde', 'Unicode formatted string did not match')

print("String test passed!")
